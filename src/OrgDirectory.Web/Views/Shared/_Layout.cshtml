@{
    var isAuth = User?.Identity?.IsAuthenticated ?? false;

    // Флаг: мы на странице /Auth/Login или /Auth/Register
    var path = Context?.Request?.Path.Value?.ToLower() ?? "";
    var isAuthPage = path.StartsWith("/auth/login") || path.StartsWith("/auth/register");
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>OrgDirectory</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/site.css" rel="stylesheet" asp-append-version="true" />

    <style>
        #main-content {
            transition: opacity 0.35s ease;
        }
        #main-content.fade-out { opacity: 0; }
        #main-content.fade-in  { opacity: 1; }
    </style>
</head>
<body class="@(isAuthPage ? "bg-light" : "")">
@if (isAuthPage)
{
    @* НИКАКИХ контейнеров/центровщиков/ограничений ширины здесь *@
    @RenderBody()
}
else
{
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
      <div class="container">
        <a class="navbar-brand" href="/" data-nav>OrgDirectory</a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav"
                aria-controls="mainNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="mainNav">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item"><a class="nav-link" href="/Organizations" data-nav>Организации</a></li>
            <li class="nav-item"><a class="nav-link" href="/Activities" data-nav>Сферы деятельности</a></li>
            <li class="nav-item"><a class="nav-link" href="/Citizens" data-nav>Граждане</a></li>
          </ul>

          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            @if (!isAuth)
            {
              <li class="nav-item"><a class="nav-link" href="/Auth/Register">Регистрация</a></li>
              <li class="nav-item"><a class="btn btn-outline-light ms-lg-2" href="/Auth/Login">Войти</a></li>
            }
            else
            {
              <li class="nav-item"><a class="btn btn-outline-light" href="/Auth/Logout">Выйти (@(User?.Identity?.Name ?? "пользователь"))</a></li>
            }
          </ul>
        </div>
      </div>
    </nav>

    <main id="main-content" class="container">
        @RenderBody()
    </main>

    <footer class="text-center text-muted small mt-5">
        <hr />
        OrgDirectory © @DateTime.Now.Year
    </footer>
}  @* <---  *@

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
</body>

    <script>
(() => {
  const main = document.getElementById("main-content");

  // --- helpers ---------------------------------------------------------------
  function navigate(url, replace = false) {
    replace ? location.replace(url) : location.assign(url);
  }

  async function fetchHtml(url) {
    const resp = await fetch(url, {
      headers: { "X-Partial": "true" },
      credentials: "same-origin"
    });
    if (!resp.ok) throw new Error("HTTP " + resp.status);
    return await resp.text();
  }

  function entityContainer(entity) {
    switch (entity) {
      case "orgs":       return "#orgs-container";
      case "citizens":   return "#citizens-container";
      case "activities": return "#activities-container";
      default:           return null;
    }
  }

  function entityBasePath(entity) {
    switch (entity) {
      case "orgs":       return "/Organizations";
      case "citizens":   return "/Citizens";
      case "activities": return "/Activities";
      default:           return "/";
    }
  }

  function currentSort(entity) {
    const wrap = document.querySelector(entityContainer(entity) + " .table-wrap");
    return {
      field: wrap?.dataset.currentField || "",
      dir:   wrap?.dataset.currentDir || "asc",
    };
  }

  // --- main/section swapping -------------------------------------------------
  async function swapMain(url) {
    main.style.opacity = "0.5";
    const html = await fetchHtml(url);
    main.innerHTML = html;
    main.style.opacity = "1";
    rebindAll();
    window.scrollTo({ top: 0, behavior: "instant" });
  }

  async function loadTable(entity, sortField, sortDir) {
    const sel = entityContainer(entity);
    const box = document.querySelector(sel);
    const base = entityBasePath(entity);

    if (!box) {
      // контейнера нет — безопасныйfallback на полную навигацию
      const qs = new URLSearchParams({ sortField: sortField || "", sortDir: sortDir || "" });
      return navigate(`${base}?${qs}`);
    }

    box.style.opacity = "0.5";
    const qs = new URLSearchParams({ sortField: sortField || "", sortDir: sortDir || "" });
    try {
      // отдельный экшен Table должен существовать в контроллере
      const html = await fetchHtml(`${base}/Table?` + qs);
      box.innerHTML = html;
    } catch (e) {
      // если /Table нет — подменим весь main
      await swapMain(`${base}?` + qs);
    }
    box.style.opacity = "1";
    rebindAll();
  }

  // --- bindings --------------------------------------------------------------
  function bindNav() {
    document.addEventListener("click", async (e) => {
      const a = e.target.closest("a[data-nav]");
      if (!a) return;
      if (a.target === "_blank" || e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) return;

      const url = new URL(a.href, location.origin);
      if (url.origin !== location.origin) return;

      e.preventDefault();
      try {
        await swapMain(a.href);
        history.pushState({}, "", a.href);
      } catch {
        navigate(a.href);
      }
    });

    window.addEventListener("popstate", async () => {
      try { await swapMain(location.href); } catch { location.reload(); }
    });
  }

  function bindSort(selector, entity, dataAttr) {
    main.querySelectorAll(selector).forEach(a => {
      a.addEventListener("click", (e) => {
        e.preventDefault();
        const cur = currentSort(entity);
        const newField = a.dataset[dataAttr];
        const nextDir = (cur.field === newField && cur.dir === "asc") ? "desc" : "asc";
        loadTable(entity, newField, nextDir);
      });
    });
  }

  function bindDeletes(selector, entity) {
    main.querySelectorAll(selector).forEach(f => {
      f.addEventListener("submit", async (e) => {
        e.preventDefault();
        if (!confirm("Удалить?")) return;
        await fetch(f.action, { method: "POST", body: new FormData(f), credentials: "same-origin" });
        const { field, dir } = currentSort(entity);
        await loadTable(entity, field, dir);
      });
    });
  }

  function rebindAll() {
    // сортировка по трём сущностям
    bindSort("[data-sort-org]", "orgs", "sortOrg");
    bindSort("[data-sort-cit]", "citizens", "sortCit");
    bindSort("[data-sort-act]", "activities", "sortAct");

    // delete-формы
    bindDeletes("form[data-del-org]", "orgs");
    bindDeletes("form[data-del-cit]", "citizens");
    bindDeletes("form[data-del-act]", "activities");
  }

  // --- init ------------------------------------------------------------------
  document.addEventListener("DOMContentLoaded", () => {
    bindNav();
    rebindAll();
  });
})();
</script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    @RenderSection("Scripts", required: false)

</html>
